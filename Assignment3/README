------------------------------------------------------------------------------------
CIS*2520 - Assignment 3
Fares Issa - issaf
0925274
November 5th, 2018
------------------------------------------------------------------------------------
* Execution of program
----------------------
This program can be run using the makefile attached. NOTE: ./q1 will only run using 
the following form "(VAR1+VAR2)" where "" are placed, and brackets are included.

command line input: 
make
./q1 "(VAR1+VAR2)", where operator can be +/-* and VAR1/VAR2 in the form of float or x1, x2, x3 etc.

command line input:
./q2
------------------------------------------------------------------------------------
* Cleaning up of file
------------------------------------------------------------------------------------
This file system can be cleaned using the makefile attached.

command line input:
make clean
>rm q1 q2

------------------------------------------------------------------------------------
* Question #1
------------------------------------------------------------------------------------
The premise of this program is to evaluate an expression given by the user in:
Preorder, inorder, and postorder forms, to display the associated expression into
a binary expression tree. As a sample. The user input given as: (((x1+5.12)*(x2-7.68))/x3)
will yield:

			/
			|
		--------
	   |	    |
	   *		x3	
	   |
    --------
   |		|
   +		-
   |		|
 -----    ------
|	  |  |		|
x1	5.12 x2    7.68

However, this final result was not achieved through this creation of this program. However,
the corresponding pre-order, in-order, and post-order works. Along with Calculation. Updating
is still buggy and will OVERWRITE the data outputted regardless of what variable it is and
when it is it inputted. This is a known limitation list of the program. The program also 
sometimes produces the wrong calculation/post/pre/and inorder results when the expression
presented is very complex. At the time of creating this program, it is assumed a lack of memory? This implementation was derived through lecture slide material.

Sample program output:
./q1 "(3.31+2.2)"
>Please select one of the options below.
>1. Display
>2. Preorder
>3. Inorder
>4. Postorder
>5. Update
>6. Calculate
>7. Exit
>
2
>Preorder Notation:
>+3.312.29 //This is correct, mind the spacing.
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
3
>Inorder Notation:
>(3.31+2.29)
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
4
>Postorder Notation:
>3.312.29+
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
6
>Result of the expression is: 5.60
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
1
>Tree:
>----
>[2.29]
>[+]
>----
>[3.31]
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
7

Here is a run with a variable x1.
./q1 "(x1+2.29)"
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
2
>+x12.29
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
5
>Please enter input in the form: (xX, #.##) excluding brackets.
"x1, 3.30"
>Please select one of the options below.
>1. Display
>..
>7. Exit
>
6
>Result of expression is: 3.30.


------------------------------------------------------------------------------------
Question #2
------------------------------------------------------------------------------------
Program that reads 200 2-digit integers from a text file "f.dat", which can be manipulated
with the given constraints: Each digit may only be 2 digits long, separated by a space.
Maximum of 10 numbers per line, and 20 rows long. Each row must be terminated by a newline 
character. The program then creates a heap with a node containing the object which is the first three integers being the key.The parental node algorithm is applied and the program displays the final heap as a 20x10  array.

Here is the sample output of the given file:
"f.dat" contents:
25 12 17 82 52 53 05 03 68 64
43 27 20 59 04 84 10 42 43 02 
81 14 42 21 09 69 05 30 20 91 
96 89 75 00 63 24 54 20 20 24 
41 62 82 46 69 42 74 68 79 28 
50 09 06 44 59 87 32 36 36 46 
83 82 43 11 21 04 08 97 93 14 
03 60 76 23 14 81 82 00 38 04 
09 83 22 90 74 56 64 75 67 55 
41 82 53 40 29 84 24 61 87 20 
99 37 50 93 57 06 29 91 92 39 
25 41 11 88 15 39 88 69 31 49 
03 37 97 53 36 54 69 68 38 43 
44 27 68 96 70 98 85 13 25 47 
51 90 37 86 42 44 48 64 41 01 
16 14 27 99 29 99 79 45 59 19 
88 56 59 88 39 30 44 59 49 72 
49 17 44 32 33 54 60 33 51 87 
12 00 68 68 49 68 74 32 09 30 
81 30 16 65 40 39 44 49 32 60

Sample program output:
./q2
>25 12 17 82 52 53 5 3 68 64 
>43 27 20 59 4 84 10 42 43 2 
>3 37 97 53 36 54 69 68 38 43 
>96 89 75 0 63 24 54 20 20 24 
>41 62 82 46 69 42 74 68 79 28 
>50 9 6 44 59 87 32 36 36 46 
>83 82 43 11 21 4 8 97 93 14 
>44 27 68 96 70 98 85 13 25 47 
>9 83 22 90 74 56 64 75 67 55 
>41 82 53 40 29 84 24 61 87 20 
>99 37 50 93 57 6 29 91 92 39 
>25 41 11 88 15 39 88 69 31 49 
>3 37 97 53 36 54 69 68 38 43 
>44 27 68 96 70 98 85 13 25 47 
>51 90 37 86 42 44 48 64 41 1 
>16 14 27 99 29 99 79 45 59 19 
>88 56 59 88 39 30 44 59 49 72 
>49 17 44 32 33 54 60 33 51 87 
>12 0 68 68 49 68 74 32 9 30 
>81 30 16 65 40 39 44 49 32 60 
